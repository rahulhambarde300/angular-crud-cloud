AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud formation template for Angular-CRUD


Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Subnets
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table and Route
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic to the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /

  # Listener for HTTP
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            MessageBody: "HTTP listener - redirect to HTTPS"
            ContentType: text/plain

   # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt LoadBalancer.DNSName
            OriginPath: ''
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only  # We are keeping this as http-only since CloudFront will handle HTTPS
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https  # Automatically redirects to HTTPS
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          MinTTL: '0'
        PriceClass: PriceClass_100  # You can adjust this to fit your needs

  
  # Security Group for EC2 Instances
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: CognitoUserPoolClient
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: vockey # Replace with your actual key pair name
        SecurityGroupIds:
          - !Ref EC2InstanceSecurityGroup
        ImageId: ami-0453ec754f44f9a4a # Replace with the appropriate AMI ID for your region
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y docker
            sudo amazon-linux-extras enable docker
            systemctl start docker
            systemctl enable docker
            usermod -aG docker $USER

            if [ -z "${UserPoolClientId}" ] || [ -z "${CognitoDomain}" ]; then
              echo "Required environment variables are not set. Exiting."
              exit 1
            fi

            export CLIENT_ID="${UserPoolClientId}"
            export AUTHORITY="${CognitoDomain}"

            # Run the Docker container
            docker run -d --name angular-app -p 443:4200 rahulh300/angular-crud
            # Wait for the container to be ready
            sleep 10
            
            docker exec angular-app sh -c "
              echo \"export const environment = {\" > /app/src/environments/environment.ts &&
              echo \"  production: false,\" >> /app/src/environments/environment.ts &&
              echo \"  CLIENT_ID: '${UserPoolClientId}',\" >> /app/src/environments/environment.ts &&
              echo \"  AUTHORITY: '${CognitoAuthority}',\" >> /app/src/environments/environment.ts &&
              echo \"  DOMAIN: '${CognitoUserPoolDomain}'\" >> /app/src/environments/environment.ts &&
              echo \"};\" >> /app/src/environments/environment.ts
            "
            # Restart the Angular application
            docker restart angular-app

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: angular-crud
      UsernameConfiguration:
        CaseSensitive: false # Usernames are not case-sensitive
      AliasAttributes: # Optional: Add aliases for login if needed
        - email # Allow users to log in with their email as well
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: LoadBalancer
    Properties:
      ClientName: angular-crud
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${CloudFrontDistribution.DomainName}/"
      LogoutURLs:
        - !Sub "https://${CloudFrontDistribution.DomainName}/logout"

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: angular-crud-dal
      UserPoolId: !Ref CognitoUserPool

Outputs:
  CloudFrontURL:
    Description: "The CloudFront Distribution URL"
    Value: !GetAtt CloudFrontDistribution.DomainName
  LoadBalancerDNS:
    Description: DNS Name of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName

  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient

  CognitoAuthority:
    Description: Cognito Authority URL
    Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"

  CognitoDomain:
    Description: Cognito User Pool Domain
    Value: !Sub "https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
